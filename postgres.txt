Cистемные представления:
pg_available_extensions -- доступные расширения
pg_config -- параметры конфигурации времени компиляции
pg_cursors -- открытые курсоры
pg_file_settings -- содержимое файла конфигурации
pg_group -- группы пользователей bd
pg_hba_file_rules -- файл конфигурации аутентификации клиентов
pg_indexes -- индексы
pg_locks -- блокировщики установелнные или ожидаемые сейчас
pg_prepared_xacts -- подготовленные транзакции
pg_roles -- роли баз данных
pg_rules -- правила
pg_settings -- значения параметров
pg_shadow -- пользователи баз данных
pg_tables
pg_timezone_abbrevs
pg_timezone_names
pg_user
pg_view -- предсталения

Основные команды postgresql в интерактивном режиме:
\connect db_name -- подключение к базе данных
\du -- список пользователей.
\dp -- список таблиц, представлений, последовательностей, прав доступа к ним
\di -- индексы
\ds -- последовательности
\dt -- список таблиц
\dt+ -- список всех таблиц с описанием
\dt*s* -- список всех таблиц, содержищах s в имени
\dv -- представления
\dS -- системные таблицы
\d+ -- описание таблицы
\o -- пересылка результатов запросов в файл
\l -- список баз данных
\i -- читать входящие данные из файла
\e -- открывает текущее содержимое буфера запроса в редакторе
\d "table_name" -- описание таблицы
\i -- запуск команды из внешнего файла, например \i /my/directory/my.sql
\pset -- команда настройки параметров форматирования
\echo -- выводит сообщение
\set -- устанавливает значение переменной среды. Без параметров выводит все, чтобы удалить занчение использвется \unset
\? -- cправочник psql
\help -- справочние sql
\q -- выход из программы

Работа с postgresql из командной строки:
-с -- запуск команды sql без входа в интерактивный режим.
-f file.sql -- выполнение команды из файла file.sql
-l -- выводит список доступных баз данных
-U -- указываем имя пользователя
-W -- приглашение для ввода пароля.
-d dbname -- подключение к бд dbname
-h -- имя хоста
-s -- пошаговый режим то есть нужно будет подтверждать все команды
-S -- однострочный режим при переходе на новую строку будет выполняться запрос sql, те не надо ставить ;
-V -- версия postgresql

psql -U postgres -d dbname -c "команда sql" -- выполнить команду в базе данных dbname
psql -d dbname -H -c "команда sql" -o my.html -- вывод результатов запроса в html-файл.

Утилиты postgresql:
createdb и dropdb -- создать или удалить базу данных
createuser и dropuser -- создание и удаление пользователя
pg_ctl -- программы предназначенные для решения задач управления(настройка, запуск остановка)
postmaster -- многопользовательский серверный модуль psql(настройка уровней отладки, портов)
initdb -- создание новых кластеров psql
pg_dunmp -- архивация и востановление данных
pg_dumpall -- резервное копирование всего кластера psql
pg_restore - восставновление бд из архива

создание бекапа:
pg_dump -h localhost -p 5440 -U someuser -F c -b -v -f mydb.backup mydb

создание бекапа базы mydb, в виде обычного текстового файла, включая команду для создания базы данных
pg_dump -h localhost -p 5432 -U someuser -C -F p -b -v -f mydb.backup mydb

Создание бекапа базы mydb, в сжатом виде, с таблицами которые содержат в имени payments
pg_dump -h localhost -p 5432 -U someuser -F c -b -v -t *payments* -f payment_tables.backup mydb 

Дамп данных только одной, конкретной таблицы. Если нужно создать резервную копию нескольких таблиц, то имена этих таблиц перечисляются с помощью ключа -t для каждой таблицы.
pg_dump -a -t table_name -f file_name database_name

Создание резервной копии с сжатием в gz
pg_dump -h localhost -O -F p -c -U postgres mydb | gzip -c > mydb.gz

Список наиболее часто используемых опций:
    -h host — хост, если не указан то используется localhost или значение из переменной окружения PGHOST.
    -p port — порт, если не указан то используется 5432 или значение из переменной окружения PGPORT.
    -u — пользователь, если не указан то используется текущий пользователь, также значение можно указать в переменной окружения PGUSER.
    -a, —data-only — дамп только данных, по-умолчанию сохраняются данные и схема.
    -b — включать в дамп большие объекты (blog’и).
    -s, —schema-only — дамп только схемы.
    -C, —create — добавляет команду для создания БД.
    -c — добавляет команды для удаления (drop) объектов (таблиц, видов и т.д.).
    -O — не добавлять команды для установки владельца объекта (таблиц, видов и т.д.).
    -F, —format {c|t|p} — выходной формат дампа, custom, tar, или plain text.
    -t, —table=TABLE — указываем определенную таблицу для дампа.
    -v, —verbose — вывод подробной информации.
    -D, —attribute-inserts — дамп используя команду INSERT с списком имен свойств.

Бекап всех баз данных используя команду pg_dumpall.

pg_dumpall > all.sql

Восстановление таблиц из бэкапа:
psql востанавливает базы данных из обычных текстовых файлов.
pg_restore восстановление сжатых бекапов

Восстановление всего бекапа с игнорированием ошибок

psql -h localhost -U someuser -d dbname -f mydb.sql

Восстановление всего бекапа с остановкой на первой ошибке

psql -h localhost -U someuser —set ON_ERROR_STOP=on -f mydb.sql

Для восстановления из tar-арихива нам понадобиться сначала создать базу с помощью CREATE DATABASE mydb; (если при создании бекапа не была указана опция -C) и восстановить

pg_restore —dbname=mydb —jobs=4 —verbose mydb.backup

Восстановление резервной копии БД, сжатой gz

gunzip mydb.gz

psql -U postgres -d mydb -f mydb
